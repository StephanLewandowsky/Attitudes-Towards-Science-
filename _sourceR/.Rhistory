consFac  [pos = '-4,0!', label = ' Conser- \\n vatism ', shape = circle, fontsize=14 width=1.,fixedsize=true]
religFac  [pos = '-4,-1.2!', label = ' Religiosity ', shape = circle, fontsize=14 width=1.,fixedsize=true]
"
paths <- supermodelfit %>%
parameterestimates(.,standardized=TRUE) %>%
select(lhs, op, rhs, std.all)
# Latent variables are left-hand side of "=~" lines
latent <- paths %>%
filter(op == "=~") %>%
select(nodes = lhs) %>%
distinct
# Edges will be labeled by the parameter estimates
all_paths <- paths %>%
filter(op != "~1") %>%
mutate(label = round(std.all, 2)) %>%
select(-std.all)
# Factor loadings are the paths in the "=~" lines, drop all but second-order factor
loadings <- all_paths %>%
filter(op == "=~") %>% filter(lhs == "allPolFac") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label)
t4mod <- c(t4mod,apply(loadings,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "'  fontsize=18]"))))
regressions <- all_paths %>%
filter(op == "~") %>%
rename(to = lhs, from = rhs) %>%
select(from, to, label)
t4mod<-c(t4mod,apply(regressions,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "'  fontsize=18]"))))
#extract covariances
covars <- all_paths %>%
filter(op == "~~") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label) %>% filter(from != to) %>% filter(label!=0)
t4mod<-c(t4mod, paste("E:ne -> ", covars[1,"from"],":sw [splines=curved  style = 'dashed' label = '", covars[1,"label"], "'  fontsize=18] "))
t4mod<-c(t4mod, paste("E:se -> ", covars[1,"to"],":nw [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("C:se -> ", covars[2,"from"],":e [splines=curved  style = 'dashed' label = '", covars[2,"label"], "'  fontsize=18] "))
t4mod<-c(t4mod, paste("C:ne -> ", covars[2,"to"],":e [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("D:se -> ", covars[3,"from"],":e [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("D:ne -> ", covars[3,"to"],":e [splines=curved  style = 'dashed' label = '", covars[3,"label"], "'  fontsize=18] "))
t4mod <- c(t4mod, "}")
writeLines(t4mod,con="supermodelViz.txt")
superhtml <- grViz("supermodelViz.txt")
html_print(add_mathjax(superhtml)) %>% webshot(file = paste(figdir,"/superSEM.pdf",sep="/"),cliprect = "viewport",zoom=0.7)
html_print(add_mathjax(superhtml)) %>% webshot(file = paste(figdir,"/superSEM.pdf",sep="/"),cliprect = "viewport",zoom=0.6)
t4mod <- "
digraph {
graph [layout = neato,
overlap = true,
outputorder = edgesfirst]
node [shape = circle ]
crtFac     [pos = '0,3!', label = ' CRT ', shape = circle, fontsize=14 width=1.,fixedsize=true]
allPolFac  [pos = '0,0!', label = ' All \\n politics ', shape = circle, fontsize=14 width=1.,fixedsize=true]
E [pos='-1.5,1.5!' label = 'E', style = invis width=.01 fixedsize=true]
vaxFac  [pos = '4,1.2!', label = ' Vax ', shape = circle, fontsize=14 width=1.,fixedsize=true]
camFac  [pos = '4,0!', label = ' Reject \\n CAM ', shape = circle, fontsize=14 width=1.,fixedsize=true]
evoFac  [pos = '4,-1.2!', label = ' Evolution ', shape = circle, fontsize=14 width=1.,fixedsize=true]
C [pos='5.2,0!' label = 'C', style = invis width=.01 fixedsize=true]
D [pos='5.2,0.8!' label = 'D', style = invis width=.01 fixedsize=true]
fmFac  [pos = '-4,1.2!', label = ' Free \\n market ', shape = circle, fontsize=14 width=1.,fixedsize=true]
consFac  [pos = '-4,0!', label = ' Conser- \\n vatism ', shape = circle, fontsize=14 width=1.,fixedsize=true]
religFac  [pos = '-4,-1.2!', label = ' Religiosity ', shape = circle, fontsize=14 width=1.,fixedsize=true]
"
paths <- supermodelfit %>%
parameterestimates(.,standardized=TRUE) %>%
select(lhs, op, rhs, std.all)
# Latent variables are left-hand side of "=~" lines
latent <- paths %>%
filter(op == "=~") %>%
select(nodes = lhs) %>%
distinct
# Edges will be labeled by the parameter estimates
all_paths <- paths %>%
filter(op != "~1") %>%
mutate(label = round(std.all, 2)) %>%
select(-std.all)
# Factor loadings are the paths in the "=~" lines, drop all but second-order factor
loadings <- all_paths %>%
filter(op == "=~") %>% filter(lhs == "allPolFac") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label)
t4mod <- c(t4mod,apply(loadings,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "'  fontsize=18]"))))
regressions <- all_paths %>%
filter(op == "~") %>%
rename(to = lhs, from = rhs) %>%
select(from, to, label)
t4mod<-c(t4mod,apply(regressions,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "' labeldistance=2.5 fontsize=18]"))))
#extract covariances
covars <- all_paths %>%
filter(op == "~~") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label) %>% filter(from != to) %>% filter(label!=0)
t4mod<-c(t4mod, paste("E:ne -> ", covars[1,"from"],":sw [splines=curved  style = 'dashed' label = '", covars[1,"label"], "'  fontsize=18] "))
t4mod<-c(t4mod, paste("E:se -> ", covars[1,"to"],":nw [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("C:se -> ", covars[2,"from"],":e [splines=curved  style = 'dashed' label = '", covars[2,"label"], "'  fontsize=18] "))
t4mod<-c(t4mod, paste("C:ne -> ", covars[2,"to"],":e [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("D:se -> ", covars[3,"from"],":e [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("D:ne -> ", covars[3,"to"],":e [splines=curved  style = 'dashed' label = '", covars[3,"label"], "'  fontsize=18] "))
t4mod <- c(t4mod, "}")
writeLines(t4mod,con="supermodelViz.txt")
grViz("supermodelViz.txt")
t4mod <- "
digraph {
graph [layout = neato,
overlap = true,
outputorder = edgesfirst]
node [shape = circle ]
crtFac     [pos = '0,3!', label = ' CRT ', shape = circle, fontsize=14 width=1.,fixedsize=true]
allPolFac  [pos = '0,0!', label = ' All \\n politics ', shape = circle, fontsize=14 width=1.,fixedsize=true]
E [pos='-1.5,1.5!' label = 'E', style = invis width=.01 fixedsize=true]
vaxFac  [pos = '4,1.2!', label = ' Vax ', shape = circle, fontsize=14 width=1.,fixedsize=true]
camFac  [pos = '4,0!', label = ' Reject \\n CAM ', shape = circle, fontsize=14 width=1.,fixedsize=true]
evoFac  [pos = '4,-1.2!', label = ' Evolution ', shape = circle, fontsize=14 width=1.,fixedsize=true]
C [pos='5.2,0!' label = 'C', style = invis width=.01 fixedsize=true]
D [pos='5.2,0.8!' label = 'D', style = invis width=.01 fixedsize=true]
fmFac  [pos = '-4,1.2!', label = ' Free \\n market ', shape = circle, fontsize=14 width=1.,fixedsize=true]
consFac  [pos = '-4,0!', label = ' Conser- \\n vatism ', shape = circle, fontsize=14 width=1.,fixedsize=true]
religFac  [pos = '-4,-1.2!', label = ' Religiosity ', shape = circle, fontsize=14 width=1.,fixedsize=true]
"
paths <- supermodelfit %>%
parameterestimates(.,standardized=TRUE) %>%
select(lhs, op, rhs, std.all)
# Latent variables are left-hand side of "=~" lines
latent <- paths %>%
filter(op == "=~") %>%
select(nodes = lhs) %>%
distinct
# Edges will be labeled by the parameter estimates
all_paths <- paths %>%
filter(op != "~1") %>%
mutate(label = round(std.all, 2)) %>%
select(-std.all)
# Factor loadings are the paths in the "=~" lines, drop all but second-order factor
loadings <- all_paths %>%
filter(op == "=~") %>% filter(lhs == "allPolFac") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label)
t4mod <- c(t4mod,apply(loadings,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "'  fontsize=18]"))))
regressions <- all_paths %>%
filter(op == "~") %>%
rename(to = lhs, from = rhs) %>%
select(from, to, label)
t4mod<-c(t4mod,apply(regressions,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "' labeldistance=5 fontsize=18]"))))
#extract covariances
covars <- all_paths %>%
filter(op == "~~") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label) %>% filter(from != to) %>% filter(label!=0)
t4mod<-c(t4mod, paste("E:ne -> ", covars[1,"from"],":sw [splines=curved  style = 'dashed' label = '", covars[1,"label"], "'  fontsize=18] "))
t4mod<-c(t4mod, paste("E:se -> ", covars[1,"to"],":nw [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("C:se -> ", covars[2,"from"],":e [splines=curved  style = 'dashed' label = '", covars[2,"label"], "'  fontsize=18] "))
t4mod<-c(t4mod, paste("C:ne -> ", covars[2,"to"],":e [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("D:se -> ", covars[3,"from"],":e [splines=curved  style = 'dashed'] "))
t4mod<-c(t4mod, paste("D:ne -> ", covars[3,"to"],":e [splines=curved  style = 'dashed' label = '", covars[3,"label"], "'  fontsize=18] "))
t4mod <- c(t4mod, "}")
writeLines(t4mod,con="supermodelViz.txt")
grViz("supermodelViz.txt")
t4modP <- "
digraph {
graph [layout = neato,
overlap = scale, splines=true]
node [shape = circle ]
allPolFac  [pos = '0,0!', label = ' All \\n Conser- \\n vatism ', shape = circle, fontsize=14 width=1.,fixedsize=true]
fmFac  [pos = '-4,1.2!', label = ' Free \\n market ', shape = circle, fontsize=14 width=1.,fixedsize=true]
evoFac  [pos = '4,-1.2!', label = ' Evolution ', shape = circle, fontsize=14 width=1.,fixedsize=true]
camFac  [pos = '4,0!', label = ' Reject \\n CAM ', shape = circle, fontsize=14 width=1.,fixedsize=true]
C [pos='5.2,0!' label = 'C', style = invis width=.01 fixedsize=true]
D [pos='5.2,0.8!' label = 'D', style = invis width=.01 fixedsize=true]
religFac  [pos = '-4,-1.2!', label = ' Religiosity ', shape = circle, fontsize=14 width=1.,fixedsize=true]
vaxFac  [pos = '4,1.2!', label = ' Vax ', shape = circle, fontsize=14 width=1.,fixedsize=true]
consFac  [pos = '-4,0!', label = ' S-P conser- \\n vatism ', shape = circle, fontsize=14 width=1.,fixedsize=true]
"
pathsP <- fitPolVaxEvoCam %>%
parameterestimates(.,standardized=TRUE) %>%
select(lhs, op, rhs, std.all)
# Latent variables are left-hand side of "=~" lines
latentP <- pathsP %>%
filter(op == "=~") %>%
select(nodes = lhs) %>%
distinct
# Edges will be labeled by the parameter estimates
all_pathsP <- pathsP %>%
filter(op != "~1") %>%
mutate(label = round(std.all, 2)) %>%
select(-std.all)
# Factor loadings are the paths in the "=~" lines, drop all but second-order factor
loadingsP <- all_pathsP %>%
filter(op == "=~") %>% filter(lhs == "allPolFac") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label)
t4modP <- c(t4modP,apply(loadingsP,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "'  fontsize=18]"))))
regressionsP <- all_pathsP %>%
filter(op == "~") %>%
rename(to = lhs, from = rhs) %>% filter(label!=0) %>%
select(from, to, label)
t4modP<-c(t4modP,apply(regressionsP,1,FUN=function(x) (paste(x["from"]," -> ",x["to"], " [label = '", x["label"], "'  fontsize=18]"))))
#extract covariances
covarsP <- all_pathsP %>%
filter(op == "~~") %>%
rename(to = rhs, from = lhs) %>%
select(from, to, label) %>% filter(from != to) %>% filter(label!=0)
t4modP<-c(t4modP, paste("C:se -> ", covarsP[1,"from"],":e [splines=curved  style = 'dashed' label = '", covarsP[1,"label"], "'  fontsize=18] "))
t4modP<-c(t4modP, paste("C:ne -> ", covarsP[1,"to"],":e [splines=curved  style = 'dashed'] "))
t4modP<-c(t4modP, paste("D:se -> ", covarsP[2,"from"],":e [splines=curved  style = 'dashed'] "))
t4modP<-c(t4modP, paste("D:ne -> ", covarsP[2,"to"],":e [splines=curved  style = 'dashed' label = '", covarsP[2,"label"], "'  fontsize=18] "))
t4modP <- c(t4modP, "}")
writeLines(t4modP,con="finalpolSEM.txt")
grViz("finalpolSEM.txt")
(fitpolmodelgender,standardized=TRUE, fit.measures=TRUE)
summary(fitpolmodelgender,standardized=TRUE, fit.measures=TRUE)
?webshot
?shrink
?add_mathjax
html_print((polgenderhtml)) %>% webshot(file = paste(figdir,"/finalgenderSEM.pdf",sep="/"),cliprect = "viewport",zoom=.7)
?html_print
html_print(superhtml,viewer=NULL) %>% webshot(file = paste(figdir,"/superSEM.pdf",sep="/"),cliprect = "viewport",zoom=0.6)
xx<-html_print(polgenderhtml,viewer=NULL)
xx
vignette("develop_sizing",package = "htmlwidgets")
htmlwidgets::createWidget(
"sigma",
x,
width = width,
height = height,
sizingPolicy = htmlwidgets::sizingPolicy(
viewer.padding = 0,
viewer.paneHeight = 500,
browser.fill = TRUE
)
)
htmlwidgets::sizingPolicy(
+     viewer.padding = 0,
+     viewer.paneHeight = 500,
+     browser.fill = TRUE
+   )
sizingPolicy(padding = 0, browser.fill = TRUE)
htmlwidgets::sizingPolicy(padding = 0, browser.fill = TRUE)
polgenderhtml <- grViz("finalgenderSEM.txt")
html_print(polgenderhtml,viewer=NULL) %>% webshot(file = paste(figdir,"/finalgenderSEM.pdf",sep="/"),cliprect = "viewport",zoom=.7)
polgenderhtml <- grViz("finalgenderSEM.txt",width=1000,height=500)
grViz("finalgenderSEM.txt",width=1000,height=500)
writeLines(t4modG,con="finalgenderSEM.txt")
polgenderhtml <- grViz("finalgenderSEM.txt",width=1000,height=500)
html_print(polgenderhtml,viewer=NULL) %>% webshot(file = paste(figdir,"/finalgenderSEM.pdf",sep="/"),cliprect = c(0,0,500,1000),zoom=.7)
html_print(polgenderhtml,viewer=NULL) %>% webshot(file = paste(figdir,"/finalgenderSEM.pdf",sep="/"),zoom=.7)
polgenderhtml <- grViz("finalgenderSEM.txt")
html_print(polgenderhtml,viewer=NULL) %>% webshot(file = paste(figdir,"/finalgenderSEM.pdf",sep="/"),zoom=.7)
plot_crop(paste(figdir,"/finalgenderSEM.pdf",sep="/"), quiet = TRUE)
library(knitr)
plot_crop(paste(figdir,"/finalgenderSEM.pdf",sep="/"), quiet = TRUE)
plot_crop(paste(figdir,"finalgenderSEM.pdf",sep="/"), quiet = TRUE)
html_print(polgenderhtml,viewer=NULL) %>% webshot(file = paste(figdir,"finalgenderSEM.pdf",sep="/"),zoom=.7)
?plot_crop
summary(supermodelfit, standardized=TRUE, fit.measures=TRUE)
regressions <- all_paths %>%
filter(op == "~") %>%
rename(to = lhs, from = rhs) %>%
select(from, to, label)
regressions
paths
all_pathsP
all_pathsP <- pathsP %>%
filter(op != "~1") %>%
mutate(label = round(std.all, 2),est = round(est,4)) %>%
select(-std.all)
pathsP <- fitPolVaxEvoCam %>%
parameterestimates(.,standardized=TRUE) %>%
select(lhs, op, rhs, std.all, est)
all_pathsP <- pathsP %>%
filter(op != "~1") %>%
mutate(label = round(std.all, 2),est = round(est,4)) %>%
select(-std.all)
all_pathsP
regressionsP <- all_pathsP %>%
filter(op == "~") %>%
rename(to = lhs, from = rhs) %>% filter(label!=0) %>%
select(from, to, label, est)
regressionsP
supermodel <- c("    vaxFac   ~ ", regressionsP[regressionsP$to=="vaxFac","est"], "*fmFac +  crtFac
evoFac   ~ ", regressionsP[regressionsP$to=="evoFac","est"], "*religFac  + crtFac
camFac   ~ ", regressionsP[regressionsP$to=="camFac","est"], "*allPolFac + crtFac
crtFac =~ a*crt1 + a*crt2 + a*crt3
allPolFac =~ fmFac + consFac + religFac
evoFac ~~ 0*camFac",
"fmFac    =~ fm
evoFac   =~ evo
camFac   =~ cam
religFac =~ relig
vaxFac   =~ vax
consFac  =~ cons
fm ~~",     fmSI$eSImod,    "*fm",
"evo ~~ ",  evoSI$eSImod,   "*evo",
"cam ~~",   camSI$eSImod,   "*cam",
"cons ~~",  consSI$eSImod, "*cons",
"relig ~~", religSI$eSImod, "*relig",
"vax ~~",   vaxSI$eSImod,    "*vax"
)
supermodelfit <- sem(supermodel, data=compositedarwin, missing="pairwise", ordered = c("crt1", "crt2", "crt3"), std.lv=TRUE)
summary(supermodelfit, standardized=TRUE, fit.measures=TRUE)
ggpanels2 <- list()
lowerab <- .0   #if these are set to 0 and 1, then all obs are used. Otherwise eliminate extreme affirmation bias folks
upperab <- 1.
k <- 0
for (qqs in c(.25,.5)) {
topcons <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean > quantile(consmean,1-qqs))
toplibs <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean < quantile(consmean,qqs))
k<-k+1
ggpanels2[[k]] <- plotexploration(toplibs, toplibs$MWevomean,toplibs$Evomean,  toplibs$MWequmean,
"Men and women evolved differently",
"Evolution",
"MW Same","YlGnBu",1,
paste("Liberals (top ",qqs*100,"%)",sep=""))
k<-k+1
ggpanels2[[k]] <- plotexploration(topcons, topcons$MWevomean,topcons$Evomean,  topcons$MWequmean,
"Men and women evolved differently",
"Evolution",
"MW Same","YlGnBu",1,
paste("Conservatives (top ",qqs*100,"%)",sep=""))
}
x11(width=12,height=8)
gridplt2 <- do.call("grid.arrange", c(ggpanels2, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibequalitygrid.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibequalitygrid",lowerab,upperab,".pdf",sep=""),sep="/")
}
ggsave(ggfn, plot=gridplt2, width=12, height=8)
#now combine both figures as one using only the top/bottom 50%
x11(width=12,height=8)
ggpanels3 <- list(ggpanels[[3]],ggpanels[[4]],ggpanels2[[3]],ggpanels2[[4]])
gridplt3 <- do.call("grid.arrange", c(ggpanels3, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibequalitygridAll.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibequalitygridAll",lowerab,upperab,".pdf",sep=""),sep="/")
}
source('~/Papers Written/Social Darwinism with Jan/_sourceR/darwinFuncs.R')
#chasing conservative hypocrisy
ggpanels <- list()
lowerab <- 0   #if these are set to 0 and 1, then all obs are used. Otherwise eliminate extreme affirmation bias folks
upperab <- 1
k <- 0
for (qqs in c(.25,.5)) {
topcons <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean > quantile(consmean,1-qqs))
toplibs <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean < quantile(consmean,qqs))
k<-k+1
ggpanels[[k]] <- plotexploration(toplibs, toplibs$MWevomean, toplibs$MWnatmean, toplibs$Evomean,
"Men and women evolved differently",
"Men and women are naturally different",
"Evolution","YlOrBr",-1,
paste("Liberals (top ",qqs*100,"%)",sep=""))
k<-k+1
ggpanels[[k]] <- plotexploration(topcons, topcons$MWevomean, topcons$MWnatmean, topcons$Evomean,
"Men and women evolved differently",
"Men and women are naturally different",
"Evolution", "YlOrBr",-1,
paste("Conservatives (top ",qqs*100,"%)",sep=""))
}
x11(width=12,height=8)
gridplt <- do.call("grid.arrange", c(ggpanels, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibevogrid.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibevogrid",lowerab,upperab,".pdf",sep=""),sep="/")
}
ggsave(ggfn, plot=gridplt, width=12, height=8)
#chasing liberal hypocrisy
ggpanels2 <- list()
lowerab <- .0   #if these are set to 0 and 1, then all obs are used. Otherwise eliminate extreme affirmation bias folks
upperab <- 1.
k <- 0
for (qqs in c(.25,.5)) {
topcons <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean > quantile(consmean,1-qqs))
toplibs <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean < quantile(consmean,qqs))
k<-k+1
ggpanels2[[k]] <- plotexploration(toplibs, toplibs$MWevomean,toplibs$Evomean,  toplibs$MWequmean,
"Men and women evolved differently",
"Evolution",
"MW Same","YlGnBu",1,
paste("Liberals (top ",qqs*100,"%)",sep=""))
k<-k+1
ggpanels2[[k]] <- plotexploration(topcons, topcons$MWevomean,topcons$Evomean,  topcons$MWequmean,
"Men and women evolved differently",
"Evolution",
"MW Same","YlGnBu",1,
paste("Conservatives (top ",qqs*100,"%)",sep=""))
}
x11(width=12,height=8)
gridplt2 <- do.call("grid.arrange", c(ggpanels2, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibequalitygrid.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibequalitygrid",lowerab,upperab,".pdf",sep=""),sep="/")
}
x11(width=12,height=8)
ggpanels3 <- list(ggpanels[[3]],ggpanels[[4]],ggpanels2[[3]],ggpanels2[[4]])
gridplt3 <- do.call("grid.arrange", c(ggpanels3, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibequalitygridAll.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibequalitygridAll",lowerab,upperab,".pdf",sep=""),sep="/")
}
source('~/Papers Written/Social Darwinism with Jan/_sourceR/darwinFuncs.R')
ggpanels <- list()
lowerab <- 0   #if these are set to 0 and 1, then all obs are used. Otherwise eliminate extreme affirmation bias folks
upperab <- 1
k <- 0
for (qqs in c(.25,.5)) {
topcons <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean > quantile(consmean,1-qqs))
toplibs <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean < quantile(consmean,qqs))
k<-k+1
ggpanels[[k]] <- plotexploration(toplibs, toplibs$MWevomean, toplibs$MWnatmean, toplibs$Evomean,
"Men and women evolved differently",
"Men and women are naturally different",
"Evolution","YlOrBr",-1,
paste("Liberals (top ",qqs*100,"%)",sep=""))
k<-k+1
ggpanels[[k]] <- plotexploration(topcons, topcons$MWevomean, topcons$MWnatmean, topcons$Evomean,
"Men and women evolved differently",
"Men and women are naturally different",
"Evolution", "YlOrBr",-1,
paste("Conservatives (top ",qqs*100,"%)",sep=""))
}
x11(width=12,height=8)
gridplt <- do.call("grid.arrange", c(ggpanels, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibevogrid.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibevogrid",lowerab,upperab,".pdf",sep=""),sep="/")
}
ggsave(ggfn, plot=gridplt, width=12, height=8)
#chasing liberal hypocrisy
ggpanels2 <- list()
lowerab <- .0   #if these are set to 0 and 1, then all obs are used. Otherwise eliminate extreme affirmation bias folks
upperab <- 1.
k <- 0
for (qqs in c(.25,.5)) {
topcons <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean > quantile(consmean,1-qqs))
toplibs <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean < quantile(consmean,qqs))
k<-k+1
ggpanels2[[k]] <- plotexploration(toplibs, toplibs$MWevomean,toplibs$Evomean,  toplibs$MWequmean,
"Men and women evolved differently",
"Evolution",
"MW Same","YlGnBu",1,
paste("Liberals (top ",qqs*100,"%)",sep=""))
k<-k+1
ggpanels2[[k]] <- plotexploration(topcons, topcons$MWevomean,topcons$Evomean,  topcons$MWequmean,
"Men and women evolved differently",
"Evolution",
"MW Same","YlGnBu",1,
paste("Conservatives (top ",qqs*100,"%)",sep=""))
}
x11(width=12,height=8)
gridplt2 <- do.call("grid.arrange", c(ggpanels2, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibequalitygrid.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibequalitygrid",lowerab,upperab,".pdf",sep=""),sep="/")
}
ggsave(ggfn, plot=gridplt2, width=12, height=8)
#now combine both figures as one using only the top/bottom 50%
x11(width=12,height=8)
ggpanels3 <- list(ggpanels[[3]],ggpanels[[4]],ggpanels2[[3]],ggpanels2[[4]])
gridplt3 <- do.call("grid.arrange", c(ggpanels3, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibequalitygridAll.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibequalitygridAll",lowerab,upperab,".pdf",sep=""),sep="/")
}
ggsave(ggfn, plot=gridplt3, width=12, height=8)
mean(toplibs$MWevomean)
mean(topcons$MWevomean)
mean(topcons$MWequmean)
mean(toplibs$MWequmean)
ggpanels <- list()
lowerab <- 0   #if these are set to 0 and 1, then all obs are used. Otherwise eliminate extreme affirmation bias folks
upperab <- 1
k <- 0
for (qqs in c(.25,.5)) {
topcons <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean > quantile(consmean,1-qqs))
toplibs <- meanIndicators %>% filter(affirmbias >= quantile(affirmbias,lowerab) & affirmbias <= quantile(affirmbias,upperab))  %>%
filter(consmean < quantile(consmean,qqs))
k<-k+1
ggpanels[[k]] <- plotexploration(toplibs, toplibs$MWevomean, toplibs$MWequmean, toplibs$Evomean,
"Men and women evolved differently",
"Men and women are naturally different",
"Evolution","YlOrBr",-1,
paste("Liberals (top ",qqs*100,"%)",sep=""))
k<-k+1
ggpanels[[k]] <- plotexploration(topcons, topcons$MWevomean, topcons$MWequmean, topcons$Evomean,
"Men and women evolved differently",
"Men and women are naturally different",
"Evolution", "YlOrBr",-1,
paste("Conservatives (top ",qqs*100,"%)",sep=""))
}
x11(width=12,height=8)
gridplt <- do.call("grid.arrange", c(ggpanels, nrow=2))
if (lowerab==0 & upperab==1) {
ggfn <- paste(figdir,"conslibevogrid.pdf",sep="/")
} else {
ggfn <- paste(figdir,paste("conslibevogrid",lowerab,upperab,".pdf",sep=""),sep="/")
}
ggsave(ggfn, plot=gridplt, width=12, height=8)
